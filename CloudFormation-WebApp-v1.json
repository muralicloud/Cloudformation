     {
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Sample Template UpdateTutorial Part 5: Sample template that can be used to test EC2 updates convert a single instance deployment into an Auto Scaled, Load Balanced solutio. **WARNING** This template creates an Amazon Ec2 Instance. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters": {
    "WebServerKeyName": {
      "Description": "Name of an existing Amazon EC2 KeyPair for SSH access",
      "Type": "String"
    },
    "WebServerInstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "m1.small",
      "AllowedValues": [
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "c1.medium": {
        "Arch": "64"
      },
      "c1.xlarge": {
        "Arch": "64"
      },
      "cc1.4xlarge": {
        "Arch": "64"
      },
      "m1.small": {
        "Arch": "64"
      },
      "m1.medium": {
        "Arch": "64"
      },
      "m1.large": {
        "Arch": "64"
      },
      "m1.xlarge": {
        "Arch": "64"
      },
      "m2.2xlarge": {
        "Arch": "64"
      },
      "m2.4xlarge": {
        "Arch": "64"
      },
      "m2.xlarge": {
        "Arch": "64"
      },
      "t1.micro": {
        "Arch": "64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "32": "ami-5675ee3f",
        "64": "ami-3275ee5b",
        "64Cluster": "ami-da76edb3",
        "64GPU": "ami-c076eda9"
      },
      "us-west-2": {
        "32": "ami-d0be2ae0",
        "64": "ami-ecbe2adc",
        "64Cluster": "ami-f4be2ac4",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "us-west-1": {
        "32": "ami-d8d1fc9d",
        "64": "ami-66d1fc23",
        "64Cluster": "ami-b0d6fbf5",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "eu-west-1": {
        "32": "ami-6893991c",
        "64": "ami-44939930",
        "64Cluster": "ami-a29298d6",
        "64GPU": "ami-a09298d4"
      },
      "ap-southeast-1": {
        "32": "ami-a29ed2f0",
        "64": "ami-aa9ed2f8",
        "64Cluster": "ami-ec9ed2be",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "ap-southeast-2": {
        "32": "ami-383eaf02",
        "64": "ami-363eaf0c",
        "64Cluster": "ami-ce3faef4",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "ap-northeast-1": {
        "32": "ami-0f3fbf0e",
        "64": "ami-173fbf16",
        "64Cluster": "ami-833ebe82",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "sa-east-1": {
        "32": "ami-a56bb0b8",
        "64": "ami-dd6bb0c0",
        "64Cluster": "ami-bb6bb0a6",
        "64GPU": "NOT_YET_SUPPORTED"
      }
    }
  },
  "Resources": {
    "WebServerUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStackResource",
                    "ec2:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "WebServerKeys": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "WebServerUser"
        }
      }
    },
    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP from the load balancer only",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupOwnerId": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.OwnerAlias"
              ]
            },
            "SourceSecurityGroupName": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.GroupName"
              ]
            }
          }
        ]
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "LaunchConfigurationName": {
          "Ref": "WebServerConfig"
        },
        "MinSize": "2",
        "MaxSize": "3",
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ]
      }
    },
"ScaleUpPolicy" : {
   "Type" : "AWS::AutoScaling::ScalingPolicy",
   "Properties" : {
      "AdjustmentType" : "ChangeInCapacity",
      "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
      "Cooldown" : "1",
      "ScalingAdjustment" : "1"
   }
},
"CPUAlarmHigh": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
      "EvaluationPeriods": "1",
      "Statistic": "Average",
      "Threshold": "10",
      "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
      "Period": "60",
      "AlarmActions": [ { "Ref": "ScaleUpPolicy" } ],
      "Namespace": "AWS/EC2",
      "Dimensions": [ {
         "Name": "AutoScalingGroupName",
         "Value": { "Ref": "WebServerGroup" }
      } ],
      "ComparisonOperator": "GreaterThanThreshold",
      "MetricName": "CPUUtilization"
   }
},    
"ScaleDownPolicy" : {
   "Type" : "AWS::AutoScaling::ScalingPolicy",
   "Properties" : {
      "AdjustmentType" : "ChangeInCapacity",
      "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
      "Cooldown" : "1",
      "ScalingAdjustment" : "-1"
   }
},
"CPUAlarmLow": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
      "EvaluationPeriods": "1",
      "Statistic": "Average",
      "Threshold": "10",
      "AlarmDescription": "Alarm if CPU Less",
      "Period": "60",
      "AlarmActions": [ { "Ref": "ScaleDownPolicy" } ],
      "Namespace": "AWS/EC2",
      "Dimensions": [ {
         "Name": "AutoScalingGroupName",
         "Value": { "Ref": "WebServerGroup" }
      } ],
      "ComparisonOperator": "LesserThanThreshold",
      "MetricName": "CPUUtilization"
   }
},    
    "WebServerConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment": "Install a simple PHP application",
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "httpd": [

                ],
                "php": [

                ]
              }
            },
            "files": {
              "/var/www/html/index.php": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "<?php\n",
                      "echo '<h1>AWS CloudFormation sample PHP application</h1>';\n",
                      "echo 'Highly available, load balanced stack updated version via UpdateStack';\n ",
                      "?>\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "apache",
                "group": "apache"
              },
              "/etc/cfn/cfn-credentials": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "AWSAccessKeyId=",
                      {
                        "Ref": "WebServerKeys"
                      },
                      "\n",
                      "AWSSecretKey=",
                      {
                        "Fn::GetAtt": [
                          "WebServerKeys",
                          "SecretAccessKey"
                        ]
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            },
            "services": {
              "sysvinit": {
                "httpd": {
                  "enabled": "true",
                  "ensureRunning": "true"
                },
                "sendmail": {
                  "enabled": "false",
                  "ensureRunning": "false"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "WebServerInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "WebServerInstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "WebServerSecurityGroup"
          }
        ],
        "KeyName": {
          "Ref": "WebServerKeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "yum update -y aws-cfn-bootstrap\n",
                "# Helper function\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref": "WebServerWaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "# Install the simple web page\n",
                "/opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r WebServerConfig ",
                "         --access-key ",
                {
                  "Ref": "WebServerKeys"
                },
                "         --secret-key ",
                {
                  "Fn::GetAtt": [
                    "WebServerKeys",
                    "SecretAccessKey"
                  ]
                },
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init'\n",
                "# Start up the cfn-hup daemon to listen for changes to the Web Server metadata\n",
                "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",
                "# All done so signal success\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"WebServer setup complete\" '",
                {
                  "Ref": "WebServerWaitHandle"
                },
                "'\n"
              ]
            ]
          }
        }
      }
    },
    "WebServerWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "WebServerWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "WebServerGroup",
      "Properties": {
        "Handle": {
          "Ref": "WebServerWaitHandle"
        },
        "Timeout": "600"
      }
    }
  },
  "Outputs": {
    "WebsiteURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      },
      "Description": "Application URL"
    }
  }
}